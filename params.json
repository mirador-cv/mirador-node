{"name":"Mirador-node","tagline":"Node.js client for the Mirador API (http://mirador.im)","body":"# Mirador Node.js Client \r\n## `npm install mirador-cv`\r\n\r\nNode.js client for the mirador API\r\n\r\n## Installation\r\n\r\nThe client is available via npm:\r\n\r\n```bash\r\n# save into your package.json file\r\nnpm install mirador-cv --save\r\n```\r\n\r\n## Usage\r\n\r\n### Overview\r\n\r\n\r\n#### Methods\r\n\r\n* `classifyUrls(url, [url...], function (errors, results) {})`\r\n* `classifyFiles(filename, [filename...], function (errors, results) {})`\r\n* `classifyBuffers(buffer, [buffer...], function (errors, results) {})`\r\n\r\n#### Input\r\n\r\n* url, filename, `Buffer` object - these will get a default ID (see below)\r\n* `{ id: 'request-id', data: url|filename|Buffer }` - specify an ID, will be attached to response\r\n\r\n#### Response Objects\r\n\r\n`MiradorResponse`\r\n\r\n* `MiradorResponse#id` (string, number) - the ID (default or specified) for the image\r\n* `MiradorResponse#value` (float - 0.0-1.0) - the likelyhood of the image being unsafe (for setting custom threshold)\r\n* `MiradorResponse#safe` (boolean) - whether or not image is safe\r\n\r\n\r\n### Classifying URL(s)\r\n\r\n```javascript\r\nvar MiradorClient = require('mirador').MiradorClient,\r\n    client = new MiradorClient('your_api_key');\r\n\r\n\r\n// classify 3 urls\r\n// you can either pass in urls and a callback, or a list of urls and a callback\r\nclient.classifyUrls('http://demo.mirador.im/test/baby.jpg', 'http://demo.mirador.im/test/sfw.jpg', function (err, results) {\r\n\r\n});\r\n\r\n// -- equal to --\r\nclient.classifyUrls(['http://demo.mirador.im/test/baby.jpg', 'http://demo.mirador.im/test/sfw.jpg'], function (err, results) {\r\n\r\n  if (err) {\r\n    throw err;\r\n  }\r\n\r\n  for(var id in results) {\r\n\r\n    // id is the url in this case, because you didn't specify..\r\n    console.log(id, results[id].value, results[id].safe);\r\n\r\n  }\r\n\r\n  console.log(results['http://demo.mirador.im/test/baby.jpg']);\r\n\r\n});\r\n\r\n// you can also specify an id for each image you pass in\r\nclient.classifyUrls([{ id: 'baby', data: 'http://demo.mirador.im/test/baby.jpg'}], function (err, results) {\r\n\r\n  if (err)\r\n    throw err;\r\n\r\n  // you can reference by the id you passed in\r\n  console.log(results.baby, results.baby.safe);\r\n\r\n});\r\n\r\n```\r\n\r\n### Classifying Files by Name\r\n\r\nThe method signature and results for classifying files is the same as by urls:\r\n\r\n```javascript\r\n\r\nclient.classifyFiles('myimage.jpg', 'coolpix.jpg', function(err, results) {\r\n\r\n  // results have the filename as the id by default\r\n  console.log(results['myimage.jpg'])  \r\n\r\n});\r\n\r\n// or.. specify an id\r\nclient.classifyFiles([{ id: 'coolpix', data: 'coolpix.jpg' }], function (err, results) {\r\n\r\n  // the id is now 'coolpix'\r\n  console.log(results.coolpix);\r\n\r\n});\r\n\r\n```\r\n\r\n### Classifying Image `Buffer` objects\r\n\r\nYou can also classify image buffers with `classifyBuffers`, same API as previous methods, just using buffers:\r\n\r\n```javascript\r\n\r\nvar myImage = fs.readFileSync('coolpix.jpg');\r\n\r\nclient.classifyBuffers(myImage, function (err, results) { \r\n\r\n  // since it's a buffer and we have nothing to go off of, the id\r\n  // becomes the index in the list of buffers passed in\r\n  console.log(results[0]);\r\n\r\n});\r\n\r\nclient.classifyBuffers([{ id: 'coolpix', data: myImage }], function (err, results) {\r\n\r\n  // really preferred; now you can keep track a lot more easily\r\n  console.log(results.coolpix);\r\n\r\n});\r\n\r\n```\r\n\r\n## Testing\r\n\r\nTests are in `test/test.js`, written with nodeunit. Supply an API Key and run:\r\n\r\n```bash\r\nMIRADOR_API_KEY=your_api_key nodeunit test/test.js\r\n\r\n# or using npm\r\nMIRADOR_API_KEY=your_api_key npm test\r\n```\r\n\r\n## Support/Questions\r\n\r\nPlease submit any bugs/feature requests through github, or email support [at] mirador.im\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}